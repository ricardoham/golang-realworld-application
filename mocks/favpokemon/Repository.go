// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	mongo "go.mongodb.org/mongo-driver/mongo"

	presenter "github.com/ricardoham/pokedex-api/api/presenter"

	uuid "github.com/google/uuid"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: e
func (_m *Repository) Create(e *presenter.FavPokemon) error {
	ret := _m.Called(e)

	var r0 error
	if rf, ok := ret.Get(0).(func(*presenter.FavPokemon) error); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, pokeId
func (_m *Repository) Delete(ctx context.Context, pokeId presenter.DeleteFavPokemon) (*mongo.DeleteResult, error) {
	ret := _m.Called(ctx, pokeId)

	var r0 *mongo.DeleteResult
	if rf, ok := ret.Get(0).(func(context.Context, presenter.DeleteFavPokemon) *mongo.DeleteResult); ok {
		r0 = rf(ctx, pokeId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.DeleteResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, presenter.DeleteFavPokemon) error); ok {
		r1 = rf(ctx, pokeId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields: ctx, pokemons
func (_m *Repository) FindAll(ctx context.Context, pokemons []*presenter.FavPokemon) ([]*presenter.FavPokemon, error) {
	ret := _m.Called(ctx, pokemons)

	var r0 []*presenter.FavPokemon
	if rf, ok := ret.Get(0).(func(context.Context, []*presenter.FavPokemon) []*presenter.FavPokemon); ok {
		r0 = rf(ctx, pokemons)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*presenter.FavPokemon)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []*presenter.FavPokemon) error); ok {
		r1 = rf(ctx, pokemons)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, pokeId, updateData
func (_m *Repository) Update(ctx context.Context, pokeId uuid.UUID, updateData *presenter.FavPokemon) (*mongo.UpdateResult, error) {
	ret := _m.Called(ctx, pokeId, updateData)

	var r0 *mongo.UpdateResult
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *presenter.FavPokemon) *mongo.UpdateResult); ok {
		r0 = rf(ctx, pokeId, updateData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.UpdateResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, *presenter.FavPokemon) error); ok {
		r1 = rf(ctx, pokeId, updateData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

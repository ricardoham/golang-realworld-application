// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	uuid "github.com/google/uuid"
	presenter "github.com/ricardoham/pokedex-api/api/presenter"
	mock "github.com/stretchr/testify/mock"
)

// FavPokemon is an autogenerated mock type for the FavPokemon type
type FavPokemon struct {
	mock.Mock
}

// CreateFavPokemon provides a mock function with given fields: pokemon
func (_m *FavPokemon) CreateFavPokemon(pokemon *presenter.SaveFavPokemon) error {
	ret := _m.Called(pokemon)

	var r0 error
	if rf, ok := ret.Get(0).(func(*presenter.SaveFavPokemon) error); ok {
		r0 = rf(pokemon)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteFavPokemon provides a mock function with given fields: pokeId
func (_m *FavPokemon) DeleteFavPokemon(pokeId presenter.DeleteFavPokemon) (int64, error) {
	ret := _m.Called(pokeId)

	var r0 int64
	if rf, ok := ret.Get(0).(func(presenter.DeleteFavPokemon) int64); ok {
		r0 = rf(pokeId)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(presenter.DeleteFavPokemon) error); ok {
		r1 = rf(pokeId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllFavPokemons provides a mock function with given fields:
func (_m *FavPokemon) GetAllFavPokemons() ([]*presenter.FavPokemon, error) {
	ret := _m.Called()

	var r0 []*presenter.FavPokemon
	if rf, ok := ret.Get(0).(func() []*presenter.FavPokemon); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*presenter.FavPokemon)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFavPokemon provides a mock function with given fields: pokeId, updateData
func (_m *FavPokemon) UpdateFavPokemon(pokeId uuid.UUID, updateData *presenter.FavPokemon) (int64, error) {
	ret := _m.Called(pokeId, updateData)

	var r0 int64
	if rf, ok := ret.Get(0).(func(uuid.UUID, *presenter.FavPokemon) int64); ok {
		r0 = rf(pokeId, updateData)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID, *presenter.FavPokemon) error); ok {
		r1 = rf(pokeId, updateData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

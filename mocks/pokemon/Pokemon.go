// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	presenter "github.com/ricardoham/pokedex-api/api/presenter"
)

// Pokemon is an autogenerated mock type for the Pokemon type
type Pokemon struct {
	mock.Mock
}

// CreatePokemon provides a mock function with given fields: _a0
func (_m *Pokemon) CreatePokemon(_a0 *presenter.SavePokemon) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*presenter.SavePokemon) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePokemon provides a mock function with given fields: pokeID
func (_m *Pokemon) DeletePokemon(pokeID presenter.DeletePokemon) (int64, error) {
	ret := _m.Called(pokeID)

	var r0 int64
	if rf, ok := ret.Get(0).(func(presenter.DeletePokemon) int64); ok {
		r0 = rf(pokeID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(presenter.DeletePokemon) error); ok {
		r1 = rf(pokeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllPokemons provides a mock function with given fields:
func (_m *Pokemon) GetAllPokemons() ([]*presenter.Pokemon, error) {
	ret := _m.Called()

	var r0 []*presenter.Pokemon
	if rf, ok := ret.Get(0).(func() []*presenter.Pokemon); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*presenter.Pokemon)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPokemon provides a mock function with given fields: pokeID
func (_m *Pokemon) GetPokemon(pokeID string) (presenter.Pokemon, error) {
	ret := _m.Called(pokeID)

	var r0 presenter.Pokemon
	if rf, ok := ret.Get(0).(func(string) presenter.Pokemon); ok {
		r0 = rf(pokeID)
	} else {
		r0 = ret.Get(0).(presenter.Pokemon)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(pokeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePokemon provides a mock function with given fields: pokeID, updateData
func (_m *Pokemon) UpdatePokemon(pokeID string, updateData *presenter.UpdatePokemon) (int64, error) {
	ret := _m.Called(pokeID, updateData)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string, *presenter.UpdatePokemon) int64); ok {
		r0 = rf(pokeID, updateData)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *presenter.UpdatePokemon) error); ok {
		r1 = rf(pokeID, updateData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
